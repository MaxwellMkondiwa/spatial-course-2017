dev.new()
plot(density(beta_sample[,1]),xlab="theta",ylab="p(theta)",main="Posterior density beta_0")
lines(density(beta0_sample_gibbs[Nb:N]), col="red")
legend("topright",legend=c("Direct","Gibbs'"), col=c("black","red"), lwd=rep(1,2))
dev.new()
plot(density(beta_sample[,2]),xlab="theta",ylab="p(theta)",main="Posterior density beta_1")
lines(density(beta1_sample_gibbs[Nb:N]), col="red")
legend("topright",legend=c("Direct","Gibbs'"), col=c("black","red"), lwd=rep(1,2))
library("ggplot2")
library("RColorBrewer")
library("akima")
library("fields")
library("ggmap")
library("maps")
library("spBayes")
library("MBA")
library("classInt")
library("plotrix")
library("geoR")
library("sp")
library("maptools")
library("rgdal")
library("classInt")
library("lattice")
library("raster")
library("sf")
library("mvtnorm")
library("MCMCpack")
data3=read.csv("../data/dataset3.csv")
myplot=function(tab,colname){
surf <- mba.surf(tab[,c("sx","sy",colname)], no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
}
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
n=nrow(data3)
X=cbind(1,data3$x)
y=data3$y
S=data3[,c("sx","sy")]
dmat=as.matrix(dist(S))
N=10000
Nb=5001
truesigs=0.25
truetaus=0.01
truebeta=c(0.2,-0.3)
truephi=2
ols=lm(y~x,data=data3)
data3$res=ols$residuals
max.dist <- 0.75*max(iDist(data3[,1:2]))
bins <- 20
vario3 <- variog(coords=data3[,1:2], data=data3$res,
uvec=(seq(0, max.dist, length=bins)))
vfit3 <-variofit(vario3, ini.cov.pars=c(0.1,1), ##sigma^2 and 1/phi
cov.model="exponential", minimisation.function="optim",
nugget=0.01, weights="equal")
phi=1/vfit3$cov.pars[2]
phi
R=exp(-phi*dmat)
Rinv=chol2inv(chol(R))
gram=chol2inv(chol(t(X)%*%X))
M=gram%*%t(X)
betamat=matrix(0,N,2)
wmat=matrix(0,N,n)
sigsvec=tausvec=rep(0,N)
beta=rep(0,2)
sigs=taus=1
asig=1
atau=0.5
bsig=btau=2
res=y-X%*%beta
for(i in 1:10){
Vw=chol2inv(chol(Rinv/sigs+diag(n)/taus))
w=as.vector(rmvnorm(1,Vw%*%res/taus,Vw))
beta=as.vector(rmvnorm(1,M%*%(y-w),taus*gram))
res=y-X%*%beta
sigs=rinvgamma(1,asig+n/2,bsig+t(w)%*%Rinv%*%w/2)
taus=rinvgamma(1,atau+n/2,btau+sum((res-y)^2)/2)
betamat[i,]=beta
wmat[i,]=w
sigsvec[i]=sigs
tausvec[i]=taus
if(i %% 100 == 0) print(i)
}
MCMCmat=cbind(betamat,wmat,sigsvec,tausvec)
colnames(MCMCmat)= c(paste0("beta",1:length(beta)),paste0("w",1:length(w)),"sigs","taus")
head(MCMCmat[,c(1:2,n+3,n+4)])
samples=read.csv("data3MCMCmat.csv")
samples=read.csv("../data/data3MCMCmat.csv")
qtls <- apply(pbsample,2,quantile,c(0.025,0.5,0.95))
pbsample <- samples[Nb:N,] ## post burn-in samples
qtls <- apply(pbsample,2,quantile,c(0.025,0.5,0.95))
qtls[,c(1:2,n+3,n+4)]
dev.new()
plot(density(pbsample[,1]),lwd=2,main="beta0",xlab="",ylab="")
abline(v=qtls[,1],lwd=2)
abline(v=truebeta[1],col="red",lwd=2)
dev.new()
plot(density(pbsample[,2]),lwd=2,main="beta1",xlab="",ylab="")
abline(v=qtls[,2],lwd=2)
abline(v=truebeta[2],col="red",lwd=2)
dev.new()
plot(density(pbsample[,n+3]),lwd=2,main="sigs",xlab="",ylab="")
abline(v=qtls[,n+3],lwd=2)
abline(v=truesigs,col="red",lwd=2)
dev.new()
plot(density(pbsample[,n+4]),lwd=2,main="taus",xlab="",ylab="")
abline(v=qtls[,n+4],lwd=2)
abline(v=truetaus,col="red",lwd=2)
what=qtls[2,3:(n+2)]
data3$what=what
myplot(data3,"what")
set.seed(1)
subsample=pbsample[sample(1:nrow(pbsample),100),]
xo=yo=seq(0,1,0.02)
so=expand.grid(xo,yo)
Do=rdist(so,S)
so=expand.grid(xo,yo)
Do=rdist(so,S)
c=exp(-phi*Do)
weights=c%*%Rinv
subsample=as.matrix(subsample)
wpredmean=subsample[,3:(n+2)]%*%t(weights)
Xo=cbind(1,0.5*sin(10*so[,1]*so[,2])+1*(0.5-so[,1])^2)
set.seed(1)
predmat=sapply(1:nrow(so),function(i,c,weights,wpredmean,subsample,Xo){
wpredvar=pbsample[,n+3]*(1-sum(c[i,]*weights[i,]))
wo=rnorm(100,wpredmean[,i],sqrt(wpredvar))
yo=as.vector(subsample[,1:2]%*%Xo[i,]) + wo + rnorm(100,rep(0,100),sqrt(subsample[,n+4]))
yo
},c,weights,wpredmean,subsample,Xo)
surface_krig_tab=cbind(so,Xo[,2],apply(predmat,2,median),apply(predmat,2,var))
colnames(surface_krig_tab)=c("sx","sy","x","yhat","vyhat")
myplot(surface_krig_tab,"yhat")
myplot(surface_krig_tab,"vyhat")
rm(list=ls())
n=100
theta=3
sigmasq=1
set.seed(1)
Y=rnorm(n,theta,sqrt(sigmasq))
tausq=5
mu=0
posterior_loglikelihood=function(theta,Y,n,sigmasq,mu,tausq){
-0.5*n*(mean(Y)-theta)^2/sigmasq-0.5*(theta-mu)^2/tausq
}
posterior_loglikelihood=function(theta,Y,n,sigmasq,mu,tausq){
-0.5*n*(mean(Y)-theta)^2/sigmasq-0.5*(theta-mu)^2/tausq
}
N=10000
Nb=5001
lambda=0.1
theta_sample_metropolis=flag=rep(0,N)
for(i in 1:N){
thetastar=rnorm(1,thetainit,sqrt(lambda))
logr=posterior_loglikelihood(thetastar,Y,n,sigmasq,mu,tausq)-posterior_loglikelihood(thetainit,Y,n,sigmasq,mu,tausq)
logu=log(runif(1,0,1))
if(logu <= logr){
theta_sample_metropolis[i]=thetastar
flag[i]=1
}	else
{
theta_sample_metropolis[i]=thetainit
}
thetainit=theta_sample_metropolis[i]
}
thetainit=0
for(i in 1:N){
thetastar=rnorm(1,thetainit,sqrt(lambda))
logr=posterior_loglikelihood(thetastar,Y,n,sigmasq,mu,tausq)-posterior_loglikelihood(thetainit,Y,n,sigmasq,mu,tausq)
logu=log(runif(1,0,1))
if(logu <= logr){
theta_sample_metropolis[i]=thetastar
flag[i]=1
}	else
{
theta_sample_metropolis[i]=thetainit
}
thetainit=theta_sample_metropolis[i]
}
acceptance_ratio=sum(flag)/length(flag)
acceptance_ratio
theta_sample_metropolis2=flag2=rep(0,N)
thetainit2=10
for(i in 1:N){
thetastar=rnorm(1,thetainit,sqrt(lambda))
logr=posterior_loglikelihood(thetastar,Y,n,sigmasq,mu,tausq)-posterior_loglikelihood(thetainit2,Y,n,sigmasq,mu,tausq)
logu=log(runif(1,0,1))
if(logu <= logr){
theta_sample_metropolis2[i]=thetastar
flag2[i]=1
}	else
{
theta_sample_metropolis2[i]=thetainit2
}
thetainit2=theta_sample_metropolis2[i]
}
dev.new()
plot(theta_sample_metropolis, type="l", col="red", xlab="Iteration i", ylab="theta_i", main="Trace plots")
lines(theta_sample_metropolis2, col="blue")
theta_sample=rnorm(N-Nb+1,(n*mean(Y)/sigmasq+mu/tausq)/(n/sigmasq+1/tausq),sqrt(1/(n/sigmasq+1/tausq)))
dev.new()
plot(density(theta_sample),xlab="theta",ylab="p(theta)",main="Posterior density")
lines(density(theta_sample_metropolis[Nb:N]), col="red")
lines(density(theta_sample_metropolis2[Nb:N]), col="blue")
legend("topright",legend=c("Direct","MA 1","MA 2"), col=c("black","red","blue"), lwd=rep(1,3))
lambda=10
theta_sample_metropolis_low=flaglow=rep(0,N)
thetainit=0
for(i in 1:N){
thetastar=rnorm(1,thetainit,sqrt(lambda))
logr=posterior_loglikelihood(thetastar,Y,n,sigmasq,mu,tausq)-posterior_loglikelihood(thetainit,Y,n,sigmasq,mu,tausq)
logu=log(runif(1,0,1))
if(logu <= logr){
theta_sample_metropolis_low[i]=thetastar
flaglow[i]=1
}	else
{
theta_sample_metropolis_low[i]=thetainit
}
thetainit=theta_sample_metropolis_low[i]
}
acceptance_ratio_low=sum(flaglow)/length(flaglow)
acceptance_ratio_low
plot(theta_sample_metropolis_low, type="l", col="red", xlab="Iteration i", ylab="theta_i", main="lambda=10")
dev.new()
plot(theta_sample_metropolis_low, type="l", col="red", xlab="Iteration i", ylab="theta_i", main="lambda=10")
lambda=0.0001
theta_sample_metropolis_high=flaghigh=rep(0,N)
thetainit=0
for(i in 1:N){
thetastar=rnorm(1,thetainit,sqrt(lambda))
logr=posterior_loglikelihood(thetastar,Y,n,sigmasq,mu,tausq)-posterior_loglikelihood(thetainit,Y,n,sigmasq,mu,tausq)
logu=log(runif(1,0,1))
if(logu <= logr){
theta_sample_metropolis_high[i]=thetastar
flaghigh[i]=1
}	else
{
theta_sample_metropolis_high[i]=thetainit
}
thetainit=theta_sample_metropolis_high[i]
}
acceptance_ratio_high=sum(flaghigh)/length(flaghigh)
acceptance_ratio_high
plot(theta_sample_metropolis_high, type="l", col="red", xlab="Iteration i", ylab="theta_i", main="lambda=0.0001")
library(MCMCpack)
n=100
sigmasq=4
set.seed(1)
Y=rnorm(n,0,sqrt(sigmasq))
alpha=2
beta=1
posterior_loglikelihood=function(sigmasq,Y,n,alpha,beta){
-(alpha+n/2+1)*log(sigmasq)-(sum(Y^2)/2+beta)/sigmasq
}
N=10000
Nb=5001
lambda=0.1
sigmasq_sample_metropolis=flag=rep(0,N)
sigmasqinit=1
for(i in 1:N){
sigmasqstar=exp(rnorm(1,log(sigmasqinit),sqrt(lambda)))
logr=posterior_loglikelihood(sigmasqstar,Y,n,alpha,beta)+log(sigmasqstar)-posterior_loglikelihood(sigmasqinit,Y,n,alpha,beta)-log(sigmasqinit)
logu=log(runif(1,0,1))
if(logu <= logr){
sigmasq_sample_metropolis[i]=sigmasqstar
flag[i]=1
}	else
{
sigmasq_sample_metropolis[i]=sigmasqinit
}
sigmasqinit=sigmasq_sample_metropolis[i]
}
acceptance_ratio=sum(flag)/length(flag)
acceptance_ratio
sigmasq_sample=rinvgamma(N-Nb+1,alpha+n/2,beta+sum(Y^2)/2)
dev.new()
plot(density(sigmasq_sample),xlab="theta",ylab="p(theta)",main="Posterior density")
lines(density(sigmasq_sample_metropolis[Nb:N]), col="red")
legend("topright",legend=c("Direct","MA"), col=c("black","red"), lwd=rep(1,2))
rm(list=ls())
library("ggplot2")
library("RColorBrewer")
library("akima")
library("fields")
library("ggmap")
library("maps")
library("spBayes")
library("MBA")
library("classInt")
library("plotrix")
library("geoR")
library("sp")
library("maptools")
library("rgdal")
library("classInt")
library("lattice")
library("raster")
library("sf")
library("mvtnorm")
library("MCMCpack")
### simulated dataset 3 from lecture 1 ####
data3=read.csv("../data/dataset3.csv")
### function for plotting interpolated surface of a column of a data table
myplot=function(tab,colname){
surf <- mba.surf(tab[,c("sx","sy",colname)], no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
}
### data and covariate surface plots
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
n=nrow(data3)
X=cbind(1,data3$x)
y=data3$y
S=data3[,c("sx","sy")]
dmat=as.matrix(dist(S))
#### Chain length and burn in ####
N=10000
Nb=5001
#### true values and posterior distribution and quantiles ####
truesigs=0.25
truetaus=0.01
truebeta=c(0.2,-0.3)
truephi=2
library(nimble)
gpcov <- nimbleFunction(
run = function(dmat=double(2),phi=double(0),n=double(0)){
returnType(double(2))
M=matrix(0,n,n)
for(i in 1:n)
for(j in 1:n)
M[i,j]=exp( -phi * dmat[i,j])
#M=exp( -ph * dmat)
return(M)
})
bayesSpatialLM <- nimbleCode({
sigs <- 1/invsigmasq
taus <- 1/invtausq
G[,] <- gpcov(dmat[,],phi,n)
V[,] <- sigs*G[,]+ taus * I[,]
C[,] <- chol(V[,])
mu[] <- X[,]%*%beta[]
y[] ~ dmnorm(mu[], cholesky=C[,], prec_param=0)  ## marginalized model
### parameter priors ###
beta[] ~ dmnorm(mub[], cholesky=Cb[,], prec_param=0)
invsigmasq ~ dgamma(2, rate=1)
invtausq ~ dgamma(0.01, 0.01)
phi ~  dunif(0,10)
})
constants <- list(n = n, dmat=dmat,
ones = rep(1,n), I=diag(n), Cb=1000*diag(2), mub=rep(0,2)
)
data <- list(y = y, X=X)
dimensions = list(G = c(n, n),
V = c(n, n),
C = c(n, n),
Cb = c(2, 2),
mub = c(2),
mu = c(n),
ones = c(n),
I = c(n,n),
beta = c(2),
y = c(n),
X= c(n,2),
G = c(n,n))
model <- nimbleModel(code=bayesSpatialLM, constants=constants, data=data,
dimensions = dimensions,check = FALSE)
Cmodel <- compileNimble(model)  ## compiling model
modelconf <- configureMCMC(Cmodel,print=TRUE)
modelconf$addMonitors(c('beta','sigs','taus','phi'))
Rmcmc <- buildMCMC(modelconf)
nimbleOptions(showCompilerOutput = FALSE)
Cmcmc <- compileNimble(Rmcmc, project = model) ## compiling MCMC
set.seed(1)
Cmcmc$run(100) ## running MCMC
samples <- as.matrix(Cmcmc$mvSamples)
head(samples)
samples = read.csv("../data/data3nimble.csv")
pbsample <- samples[Nb:N,] ## post burn-in samples
qtls <- apply(pbsample,2,quantile,c(0.025,0.5,0.95))
qtls
dev.new()
plot(density(pbsample[,"beta.1."]),lwd=2,main="beta0",xlab="",ylab="")
abline(v=qtls[,"beta.1."],lwd=2)
abline(v=truebeta[1],col="red",lwd=2)
dev.new()
plot(density(pbsample[,"beta.2."]),lwd=2,main="beta1",xlab="",ylab="")
abline(v=qtls[,"beta.2."],lwd=2)
abline(v=truebeta[2],col="red",lwd=2)
dev.new()
plot(density(pbsample[,"sigs"]),lwd=2,main="sigs",xlab="",ylab="")
abline(v=qtls[,"sigs"],lwd=2)
abline(v=truesigs,col="red",lwd=2)
dev.new()
plot(density(pbsample[,"taus"]),lwd=2,main="taus",xlab="",ylab="")
abline(v=qtls[,"taus"],lwd=2)
abline(v=truetaus,col="red",lwd=2)
dev.new()
plot(density(pbsample[,"phi"]),lwd=2,main="phi",xlab="",ylab="")
abline(v=qtls[,"phi"],lwd=2)
abline(v=truephi,col="red",lwd=2)
set.seed(1)
subsample=pbsample[sample(1:nrow(pbsample),100),]
wsamples=apply(subsample,1,function(params,y,X,dmat){
beta=params[1:2]
taus=params[7]
sigs=params[6]
phi=params[5]
Rinv=chol2inv(chol(exp(-phi*dmat)))
Vw=chol2inv(chol(Rinv/sigs+diag(n)/taus))
w=as.vector(rmvnorm(1,Vw%*%(y-X%*%beta)/taus,Vw))
},y,X,dmat  )
what=apply(wsamples,1,median)
data3$what=what
myplot(data3,"what")
rm(list=ls())
library(spBayes)
library(MBA)
library(geoR)
library(fields)
library(sp)
library(maptools)
library(rgdal)
library(classInt)
library(lattice)
data(BEF.dat)
BEF.dat <- BEF.dat[BEF.dat$ALLBIO02_KGH>0,]
bio <- BEF.dat$ALLBIO02_KGH*0.001;
log.bio <- log(bio)
coords <- as.matrix(BEF.dat[,c("XUTM","YUTM")])
x.res <- 100; y.res <- 100
surf <- mba.surf(cbind(coords, log.bio), no.X=x.res, no.Y=y.res, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)")
points(coords)
p <- 6 ## This is the number of columns in the design matrix
beta.prior.mean <- as.matrix(rep(0, times=p))
beta.prior.precision <- matrix(0, nrow=p, ncol=p)
phi <- 0.014 ## Set the spatial range (from the variogram)
alpha <- 0.016/0.08 ## Set the nugget/partial-sill ratio
sigma.sq.prior.shape <- 2.0 ## Set IG shape for sigma.sq (partial sill)
sigma.sq.prior.rate <- 0.08 ## Set IG scale for sigma.sq (partial sill)
sp.exact <- bayesGeostatExact(
log.bio~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3,
data=BEF.dat, coords=coords, n.samples=1000,
beta.prior.mean=beta.prior.mean,
beta.prior.precision=beta.prior.precision,
cov.model="exponential",
phi=phi, alpha=alpha,
sigma.sq.prior.shape=sigma.sq.prior.shape,
sigma.sq.prior.rate=sigma.sq.prior.rate,
sp.effects=FALSE)
round(summary(sp.exact$p.samples)$quantiles,3)
n.samples <- 1000
bef.sp <- spLM(log.bio~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3,
data=BEF.dat, coords=coords, starting=list("phi"=3/200,"sigma.sq"=0.08,
"tau.sq"=0.02), tuning=list("phi"=0.1, "sigma.sq"=0.05, "tau.sq"=0.05),
priors=list("phi.Unif"=c(3/1500, 3/50), "sigma.sq.IG"=c(2, 0.08),
"tau.sq.IG"=c(2, 0.02)), cov.model="exponential",n.samples=n.samples)
round(summary(mcmc(bef.sp$p.theta.samples))$quantiles,3)
burn.in <- floor(0.75*n.samples)
bef.sp <- spRecover(bef.sp, start=burn.in, thin=2)
dev.new()
par(mfrow=c(3,2))
plot(beta.samples, auto.layout=TRUE, density=FALSE)
beta.samples = bef.sp$p.beta.recover.samples
w.samples = bef.sp$p.w.recover.samples
dev.new()
par(mfrow=c(3,2))
plot(beta.samples, auto.layout=TRUE, density=FALSE)
round(summary(mcmc(bef.sp$p.beta.recover.samples))$quantiles,3)
w.hat.mu <- apply(w.samples,1,mean)
w.hat.sd <- apply(w.samples,1,sd)
lm.bio = lm(log.bio~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3, data=BEF.dat)
bio.resid = resid(lm.bio)
par(mfrow=c(1,2))
surf <- mba.surf(cbind(coords, bio.resid), no.X=x.res, no.Y=y.res, extend=FALSE)$xyz.est
z.lim <- range(surf[[3]], na.rm=TRUE)
image.plot(surf, xaxs = "r", yaxs = "r", zlim=z.lim, main="LM residuals")
surf <- mba.surf(cbind(coords, w.hat.mu), no.X=x.res, no.Y=y.res, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", zlim=z.lim, main="Mean spatial effects (w(s))")
BEF.shp <- readOGR("BEF-data/BEF_bound.shp")
shp2poly <- BEF.shp@polygons[[1]]@Polygons[[1]]@coords
BEF.poly <- as.matrix(shp2poly)
BEF.grids <- readGDAL("BEF-data/dem_slope_lolosptc_clip_60.img")
## Construct the prediction design matrix for the entire grid extent.
pred.covars <- cbind(BEF.grids[["band1"]], BEF.grids[["band2"]], BEF.grids[["band3"]], BEF.grids[["band4"]], BEF.grids[["band5"]])
pred.covars <- cbind(rep(1, nrow(pred.covars)), pred.covars)
## Extract the coordinates of the BEF bounding polygon vertices and use the pointsInPoly (spBayes) function to obtain the desired subset of the prediction design matrix and associated prediction coordinates (i.e., pixel centroids).
pred.coords <- SpatialPoints(BEF.grids)@coords
pointsInPolyOut <- pointsInPoly(BEF.poly, pred.coords)
pred.covars <- pred.covars[pointsInPolyOut,]
pred.coords <- pred.coords[pointsInPolyOut,]
bef.bio.pred <- spPredict(bef.sp, start=burn.in, thin=2, pred.coords=pred.coords, pred.covars=pred.covars)
bef.bio.pred.mu = apply(bef.bio.pred$p.y.predictive.samples,1,mean)
bef.bio.pred.sd = apply(bef.bio.pred$p.y.predictive.samples,1,sd)
surf <- mba.surf(cbind(coords, log.bio), no.X=x.res, no.Y=x.res, extend=TRUE, sp=TRUE)$xyz.est
#surf <- surf [!is.na(over(surf, BEF.shp)),]
surf <- surf [!is.na((over(surf, BEF.shp)))[,1],]
surf <- as.image.SpatialGridDataFrame(surf)
z.lim <- range(surf[["z"]], na.rm=TRUE)
pred.grid <- as.data.frame(list(pred.coords, pred.mu=bef.bio.pred.mu, pred.sd=bef.bio.pred.sd))
coordinates(pred.grid) = c("x", "y")
gridded(pred.grid) <- TRUE
pred.mu.image <- as.image.SpatialGridDataFrame(pred.grid["pred.mu"])
par(mfrow=c(1,2))
image.plot(surf, axes=TRUE, zlim=z.lim, col=tim.colors(25), xaxs = "r", yaxs = "r", main="Log metric tons of biomass")
plot(BEF.shp, add=TRUE)
image.plot(pred.mu.image, zlim=z.lim, col=tim.colors(25), xaxs = "r", yaxs = "r", main="Mean predicted log metric tons of biomass")
plot(BEF.shp, add=TRUE)
