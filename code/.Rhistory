data1=read.csv("../data/dataset1.csv")
data2=read.csv("../data/dataset2.csv")
data3=read.csv("../data/dataset3.csv")
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
myplot=function(tab,colname){
surf <- mba.surf(tab[,c("sx","sy",colname)], no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
}
dev.new()
myplot(data1,"y")
myplot(data2,"y")
myplot(data3,"y")
myplot(data3,"x")
head(data1)
lmobj1=lm(y~x,data=data1)
lmobj2=lm(y~x,data=data2)
lmobj3=lm(y~x,data=data3)
summary(lmobj1)
summary(lmobj2)
summary(lmobj3)
data1$res=lmobj1$residuals
data2$res=lmobj2$residuals
data3$res=lmobj3$residuals
myplot(data1,"res")
myplot(data2,"res")
myplot(data3,"res")
max.dist <- 0.75*max(iDist(data1[,1:2]))
bins <- 20
n=nrow(data1)
ydiff=diff=rep(0,n^2)
for(i in 2:n) for(j in 1:(i-1)) {
ydiff[(i-1)*n+j]=(data1$y[i]-data1$y[j])^2
diff[(i-1)*n+j]=sqrt(sum(data1[i,1:2]-data1[j,1:2])^2)
}
dev.new()
plot(diff,ydiff,xlab="",ylab="")
vario1raw <- variog(coords=data1[,1:2], data=data1$y, uvec=(seq(0, max.dist, length=bins)))
plot(vario1raw,pch=16)
vario1 <- variog(coords=data1[,1:2], data=data1$res, uvec=(seq(0, max.dist, length=bins)))
plot(vario1,pch=16)
vario2 <- variog(coords=data1[,1:2], data=data2$res, uvec=(seq(0, max.dist, length=bins)))
plot(vario2,pch=16)
vario3 <- variog(coords=data1[,1:2], data=data3$res, uvec=(seq(0, max.dist, length=bins)))
plot(vario3,pch=16)
data(WEF.dat)
WEF.dat <- WEF.dat[!apply(WEF.dat[,c("East_m","North_m","DBH_cm","Tree_height_m","ELEV_m")], 1, function(x)any(is.na(x))),]
DBH <- WEF.dat$DBH_cm
coords <- as.matrix(WEF.dat[,c("East_m","North_m")])
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
surf <- mba.surf(cbind(coords,DBH), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
max.dist=0.25*max(iDist(coords))
bins=50
vario.DBH <- variog(coords=coords, data=DBH, uvec=(seq(0, max.dist, length=bins)))
plot(vario.DBH)
lm.DBH <- lm(DBH~Species, data=WEF.dat)
summary(lm.DBH)
DBH.resid <- resid(lm.DBH)
surf <- mba.surf(cbind(coords,DBH.resid), no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
vario.DBH.resid <- variog(coords=coords, data=DBH.resid, uvec=(seq(0, max.dist, length=bins)))
plot(vario.DBH.resid)
lmobj2s=lm(y~x+sx+sy,data=data2)
data2$res2=lmobj2s$residuals
myplot(data2,"res2")
vario2s <- variog(coords=data1[,1:2], data=data2$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario2s,pch=16)
vario2s <- variog(coords=data1[,1:2], data=data2$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario2s,pch=16)
vario2s <- variog(coords=data1[,1:2], data=data2$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario2s,pch=16)
dev.new()
lmobj2s=lm(y~x+sx+sy,data=data2)
data2$res2=lmobj2s$residuals
myplot(data2,"res2")
vario2s <- variog(coords=data1[,1:2], data=data2$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario2s,pch=16)
max.dist <- 0.75*max(iDist(data1[,1:2]))
bins <- 20
lmobj2s=lm(y~x+sx+sy,data=data2)
data2$res2=lmobj2s$residuals
myplot(data2,"res2")
plot(vario2s,pch=16)
max.dist <- 0.75*max(iDist(data1[,1:2]))
bins <- 20
lmobj2s=lm(y~x+sx+sy,data=data2)
data2$res2=lmobj2s$residuals
myplot(data2,"res2")
vario2s <- variog(coords=data1[,1:2], data=data2$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario2s,pch=16)
lmobj3s=lm(y~x+sx+sy,data=data3)
data3$res2=lmobj3s$residuals
myplot(data3,"res2")
vario3s <- variog(coords=data1[,1:2], data=data3$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario3s,pch=16)
library(ggplot2)
library(RColorBrewer)
library(akima)
library(fields)
library(ggmap)
library(maps)
library(spBayes)
library(MBA)
library(classInt)
library(plotrix)
data1=read.csv("../data/dataset1.csv")
head(data1)
dev.new()
plot(data1$sx,data1$sy,xlab="",ylab="",main="Data locations")
dev.new()
plot(data1$sx,data1$sy,xlab="",ylab="",main="Data locations")
colors=colorRampPalette(c("midnightblue", "cyan","yellow","red"))(5)
quants=classIntervals(data1$y,n=5,style="quantile")
sc=scale_colour_gradientn(colours = colors,values=rescale(quants$brks,c(0,1)),name="y")
p0 = ggplot(data=data1,aes(x=sx,y=sy))+sc+labs(x = "",y = "")
p1=p0+geom_point(data=data1,aes(x=sx,y=sy,color=y))+guides(fill=guide_colorbar(title="y"))
plot(p1)
intobj1=interp(data1$sx,data1$sy,data1$y,
xo=frange(data1$sx,200),yo=frange(data1$sy,200))
frange=function(x,n) seq(min(x),max(x),length=n)
intobj1=interp(data1$sx,data1$sy,data1$y,
xo=frange(data1$sx,200),yo=frange(data1$sy,200))
head(intobj1)
name(intobj1)
names(intobj1)
intobj1$x
intobj1$y
head(intobj1$z)
interpdata1=cbind(expand.grid(intobj1$x,intobj1$y),as.vector(intobj1$z))
colnames(interpdata1)=c("sx","sy","y")
p1interp=p0+geom_raster(data=interpdata1,aes(x=sx,y=sy,fill=y))+
scale_fill_gradientn(colours=colors,values=rescale(quants$brks,c(0,1)),name="y")
plot(p1interp)
dev.new()
plot(p1)
rm(list=ls())
data(WEF.dat)
head(WEF.dat)
head(WEF.dat)
WEF.dat <- WEF.dat[!apply(WEF.dat[,c("East_m","North_m","DBH_cm","Tree_height_m","ELEV_m")], 1, function(x)any(is.na(x))),]
DBH <- WEF.dat$DBH_cm
coords <- as.matrix(WEF.dat[,c("East_m","North_m")])
plot(coords, pch=1, cex=sqrt(DBH)/10, col="darkgreen", xlab="Easting (m)", ylab="Northing (m)")
dev.new()
plot(coords, pch=1, cex=sqrt(DBH)/10, col="darkgreen", xlab="Easting (m)", ylab="Northing (m)")
leg.vals <- round(quantile(DBH),0)
legend("topleft", pch=1, legend=leg.vals, col="darkgreen", pt.cex=sqrt(leg.vals)/10, bty="n", title="DBH (cm)")
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
quant <- classIntervals(DBH, n=5, style="quantile")
plot(quant, pal=col.pal, xlab="DBH", main="Quantile")
quant.col <- findColours(quant, col.pal)
plot(coords, col=quant.col, pch=19, cex=0.5, main="Quantile", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(quant.col, "palette"),
legend=names(attr(quant.col, "table")), bty="n")
fixed <- classIntervals(DBH, n=4, style="fixed", fixedBreaks=c(0,12.7,30.48,60,max(DBH)+1))
fixed.col <- findColours(fixed, col.pal)
plot(coords, col=fixed.col, pch=19, cex=0.5, main="Forestry tree size classes", xlab="Easting (m)", ylab="Northing (m)")
legend("topleft", fill=attr(fixed.col, "palette"), legend=c("sapling","poletimber","sawtimber","large sawtimber"), bty="n")
x.res <- 100; y.res <- 100
surf <- mba.surf(cbind(coords, DBH), no.X=x.res, no.Y=y.res, h=5, m=2, extend=FALSE)$xyz.est
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
rm(list=ls())
library(ggplot2)
library(RColorBrewer)
library(akima)
library(fields)
library(ggmap)
library(maps)
library(spBayes)
library(MBA)
library(classInt)
library(plotrix)
library(geoR)
data1=read.csv("../data/dataset1.csv")
data2=read.csv("../data/dataset2.csv")
data3=read.csv("../data/dataset3.csv")
head(data2)
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
myplot=function(tab,colname){
surf <- mba.surf(tab[,c("sx","sy",colname)], no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
}
dev.new()
myplot(data1,"y")
myplot(data2,"y")
myplot(data3,"y")
myplot(data3,"x")
lmobj1=lm(y~x,data=data1)
lmobj2=lm(y~x,data=data2)
lmobj3=lm(y~x,data=data3)
summary(lmobj1)
summary(lmobj2)
summary(lmobj3)
data1$res=lmobj1$residuals
data2$res=lmobj2$residuals
data3$res=lmobj3$residuals
graphics.off()
dev.new()
myplot(data1,"res")
myplot(data2,"res")
myplot(data3,"res")
vario1raw <- variog(coords=data1[,1:2], data=data1$y, uvec=(seq(0, max.dist, length=bins)))
plot(vario1raw,pch=16)
max.dist <- 0.75*max(iDist(data1[,1:2]))
bins <- 20
vario1raw <- variog(coords=data1[,1:2], data=data1$y, uvec=(seq(0, max.dist, length=bins)))
plot(vario1raw,pch=16)
vario1 <- variog(coords=data1[,1:2], data=data1$res, uvec=(seq(0, max.dist, length=bins)))
plot(vario1,pch=16)
vario2 <- variog(coords=data1[,1:2], data=data2$res, uvec=(seq(0, max.dist, length=bins)))
plot(vario2,pch=16)
vario3 <- variog(coords=data1[,1:2], data=data3$res, uvec=(seq(0, max.dist, length=bins)))
plot(vario3,pch=16)
lmobj2s=lm(y~x+sx+sy,data=data2)
data2$res2=lmobj2s$residuals
myplot(data2,"res2")
vario2s <- variog(coords=data1[,1:2], data=data2$res2, uvec=(seq(0, max.dist, length=bins)))
plot(vario2s,pch=16)
library(sp)
library(rgdal)
lltoxy=function(loc)
{
i=nchar(loc)-4
part1=strtoi(substring(loc,1,i))
part2=strtoi(substring(loc,i+2,i+3))
part3=substring(loc,i+4,i+4)
deg=(part1+part2/100)*pi/180
if(((part3=="W") || (part3=="S")) && (part1<180)) deg=-deg
deg
}
naiveEuclid=function(lat1,long1,lat2,long2)
{
lambda1=lltoxy(long1)
lambda2=lltoxy(long2)
theta1=lltoxy(lat1)
theta2=lltoxy(lat2)
naivedist=6371*sqrt((lambda1-lambda2)^2+(theta1-theta2)^2)
naivedist
}
naiveEuclid("41.88N","87.63W","44.89N","93.22W")
naiveEuclid("40.78N","73.97W","29.98N","90.25W")
geodesic=function(lat1,long1,lat2,long2)
{
lambda1=lltoxy(long1)
lambda2=lltoxy(long2)
theta1=lltoxy(lat1)
theta2=lltoxy(lat2)
geo=6371*acos(round(sin(theta1)*sin(theta2)+cos(theta1)*cos(theta2)*cos(lambda2-lambda1),5))
geo
}
geodesic("41.88N","87.63W","44.89N","93.22W")
geodesic("40.78N","73.97W","29.98N","90.25W")
LongLatToUTM<-function(x,y,zone){
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
y<-c( 41.8,44.89,40.78,29.98)
x<--c( 87.63,93.22,73.97,90.25)
s=LongLatToUTM(x,y,17)
row.names(s)=c("Chicago","Minneapolis","New York","New Orleans")
round(dist(s)/1000,2)
library("ggplot2")
library("RColorBrewer")
library("akima")
library("fields")
library("ggmap")
library("maps")
library("spBayes")
library("MBA")
library("classInt")
library("plotrix")
library("geoR")
library("sp")
library("maptools")
library("rgdal")
library("classInt")
library("lattice")
library("raster")
library("sf")
data3=read.csv("../data/dataset3.csv")
myplot=function(tab,colname){
surf <- mba.surf(tab[,c("sx","sy",colname)], no.X=100, no.Y=100, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)", col=col.br(25))
}
col.br <- colorRampPalette(c("midnightblue", "cyan", "yellow", "red"))
col.pal <- col.br(5)
dev.new()
dev.new()
myplot(data3,"y")
myplot(data3,"x")
set.seed(04152017)
N=nrow(data3)
N
ind=sample(1:N,N/2,replace=FALSE)
datain=data3[ind,]  ## in-sample data
dataout=data3[-ind,]
ols=lm(y~x,data=datain)
datain$res=ols$residuals
beta_ols=ols$coefficients
summary(ols)
summary(ols)$cov.unscaled))
summary(ols)$cov.unscaled
beta_ols_CI=ols$coefficients+1.96*
t(t(sqrt(diag(summary(ols)$cov.unscaled))*summary(ols)$sigma))%*%c(-1,1)
beta_ols_CI
myplot(datain,"y")
myplot(datain,"x")
myplot(datain,"res")
max.dist <- 0.75*max(iDist(datain[,1:2]))
bins <- 20
vario3 <- variog(coords=datain[,1:2], data=datain$res,
uvec=(seq(0, max.dist, length=bins)))
plot(vario3,pch=16)
vfit3 <-variofit(vario3, ini.cov.pars=c(0.1,1), ##sigma^2 and 1/phi
cov.model="exponential", minimisation.function="optim",
nugget=0.01, weights="equal")
vfit3
lines(vfit3,col="red",lwd=2)
mle3 <- likfit(coords=datain[,1:2],data=datain$y,
trend = trend.spatial(~x, datain), ini.cov.pars=c(0.15,0.25),
nugget = 0.009,cov.model="exponential",nospatial=TRUE)
lines(mle3,col="blue",lwd=2)
mle3
names(mle3)
mle3$nospatial$beta.ns
beta_ols
beta_mle_CI=mle3$beta+1.96*t(t(sqrt(diag(mle3$beta.var))))%*%c(-1,1)
beta_mle_CI
beta_ols_CI
mle3$AIC
mle3$nospatial$AIC.ns
mle3$BIC
mle3$nospatial$BIC.ns
Xout=cbind(1,dataout$x)
pred_ols=as.vector(Xout%*%beta_ols)
krig_variofit=krige.conv(coords=datain[,1:2],data=datain$res,
locations=dataout[,1:2],krige=krige.control(type.krige="SK",obj.model=vfit3,
beta=0))
pred_variofit=pred_ols+krig_variofit$predict
krig_mlefit=krige.conv(coords=datain[,1:2],data=datain$y,
locations=dataout[,1:2],krige=krige.control(type.krige="OK",obj.model=mle3,
trend.d=trend.spatial(~x, datain),trend.l=trend.spatial(~x, dataout)))
pred_mlefit=krig_mlefit$predict
var_mlefit=krig_mlefit$krige.var
sqrt(mean((dataout$y-pred_ols)^2))
sqrt(mean((dataout$y-pred_variofit)^2))
sqrt(mean((dataout$y-pred_mlefit)^2))
CI_ols=pred_ols+1.96*summary(ols)$sigma*cbind(-rep(1,N/2),rep(1,N/2))
mean(CI_ols[,1]<dataout$y & CI_ols[,2]>dataout$y)
mean(CI_ols[,2]-CI_ols[,1])
CI_vario=pred_variofit+1.96*sqrt(krig_variofit$krige.var)%*%t(c(-1,1))
mean(CI_vario[,1]<dataout$y & CI_vario[,2]>dataout$y)
mean(CI_vario[,2]-CI_vario[,1])
CI_mle=pred_mlefit+1.96*sqrt(krig_mlefit$krige.var)%*%t(c(-1,1))
mean(CI_mle[,1]<dataout$y & CI_mle[,2]>dataout$y)
mean(CI_mle[,2]-CI_mle[,1])
xo=yo=seq(0,1,0.02)
s=expand.grid(xo,yo)
surface_X=0.5*sin(10*s[,1]*s[,2])+1*(0.5-s[,1])^2
krig_surface_mlefit=krige.conv(coords=datain[,1:2],data=datain$y,
locations=s,krige=krige.control(type.krige="OK",obj.model=mle3,
trend.d=trend.spatial(~x, datain),trend.l=trend.spatial(~surface_X)))
pred_surface_mlefit=krig_surface_mlefit$predict
var_surface_mlefit=krig_surface_mlefit$krige.var
surface_krig_tab=cbind(s,surface_X,pred_surface_mlefit,var_surface_mlefit)
colnames(surface_krig_tab)=c("sx","sy","x","yhat","vyhat")
myplot(surface_krig_tab,"yhat")
myplot(data3,"y")
myplot(surface_krig_tab,"vyhat")
points(datain[,1],datain[,2],pch=16)
library(sp)
library(rgdal)
lltoxy=function(loc)
{
i=nchar(loc)-4
part1=strtoi(substring(loc,1,i))
part2=strtoi(substring(loc,i+2,i+3))
part3=substring(loc,i+4,i+4)
deg=(part1+part2/100)*pi/180
if(((part3=="W") || (part3=="S")) && (part1<180)) deg=-deg
deg
}
naiveEuclid=function(lat1,long1,lat2,long2)
{
lambda1=lltoxy(long1)
lambda2=lltoxy(long2)
theta1=lltoxy(lat1)
theta2=lltoxy(lat2)
naivedist=6371*sqrt((lambda1-lambda2)^2+(theta1-theta2)^2)
naivedist
}
naiveEuclid("41.88N","87.63W","44.89N","93.22W")
naiveEuclid("40.78N","73.97W","29.98N","90.25W")
geodesic=function(lat1,long1,lat2,long2)
{
lambda1=lltoxy(long1)
lambda2=lltoxy(long2)
theta1=lltoxy(lat1)
theta2=lltoxy(lat2)
geo=6371*acos(round(sin(theta1)*sin(theta2)+cos(theta1)*cos(theta2)*cos(lambda2-lambda1),5))
geo
}
geodesic("41.88N","87.63W","44.89N","93.22W")
geodesic("40.78N","73.97W","29.98N","90.25W")
LongLatToUTM<-function(x,y,zone){
xy <- data.frame(ID = 1:length(x), X = x, Y = y)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")  ## for example
res <- spTransform(xy, CRS(paste("+proj=utm +zone=",zone," ellps=WGS84",sep='')))
return(as.data.frame(res))
}
y<-c( 41.8,44.89,40.78,29.98)
x<--c( 87.63,93.22,73.97,90.25)
s=LongLatToUTM(x,y,17)
row.names(s)=c("Chicago","Minneapolis","New York","New Orleans")
round(dist(s)/1000,2)
geodesic("41.88N","87.63W","44.89N","93.22W")
geodesic("40.78N","73.97W","29.98N","90.25W")
data(BEF.dat)
BEF.dat <- BEF.dat[BEF.dat$ALLBIO02_KGH>0,]
bio <- BEF.dat$ALLBIO02_KGH*0.001;
log.bio <- log(bio)
coords <- as.matrix(BEF.dat[,c("XUTM","YUTM")])
x.res <- 100; y.res <- 100
surf <- mba.surf(cbind(coords, log.bio), no.X=x.res, no.Y=y.res, h=5, m=2, extend=FALSE)$xyz.est
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)")
points(coords)
graphics.off()
dev.new()
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", xlab="Easting (m)", ylab="Northing (m)")
points(coords)
BEF.small=BEF.dat[,c("XUTM","YUTM","ELEV","SLOPE","SUM_02_TC1","SUM_02_TC2","SUM_02_TC3")]
BEF.small$logbio=log.bio
ols=lm(logbio~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3,data=BEF.small)
BEF.small$res=ols$residuals
beta_ols=ols$coefficients
beta_ols_CI=ols$coefficients+1.96*
t(t(sqrt(diag(summary(ols)$cov.unscaled))*summary(ols)$sigma))%*%c(-1,1)
summary(ols)
beta_ols_CI
res_OLS=resid(ols)
surf <- mba.surf(cbind(coords, res_OLS), no.X=x.res, no.Y=y.res, extend=FALSE)$xyz.est
z.lim <- range(surf[[3]], na.rm=TRUE)
dev.new()
image.plot(surf, xaxs = "r", yaxs = "r", zlim=z.lim, main="LM residuals")
max.dist <- 0.25*max(iDist(BEF.small[,1:2]))
bins <- 20
vario <- variog(coords=BEF.small[,1:2], data=BEF.small$res,
uvec=(seq(0, max.dist, length=bins)))
plot(vario,pch=16)
mle <- likfit(coords=BEF.small[,1:2],data=BEF.small$logbio,
trend = trend.spatial(~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3,
BEF.small), ini.cov.pars=c(0.05,100),
nugget = 0.05,cov.model="exponential",nospatial=TRUE)
mle$AIC
mle$BIC
mle$nospatial$AIC
mle$nospatial$BIC
BEF.shp <- readOGR("BEF-data/BEF_bound.shp")
shp2poly <- BEF.shp@polygons[[1]]@Polygons[[1]]@coords
BEF.poly <- as.matrix(shp2poly)
BEF.grids <- readGDAL("BEF-data/dem_slope_lolosptc_clip_60.img")
pred.covars <- cbind(BEF.grids[["band1"]], BEF.grids[["band2"]], BEF.grids[["band3"]], BEF.grids[["band4"]], BEF.grids[["band5"]])
colnames(pred.covars)=c("ELEV","SLOPE","SUM_02_TC1","SUM_02_TC2","SUM_02_TC3")
pred.covars=as.data.frame(pred.covars)
#pred.covars <- cbind(rep(1, nrow(pred.covars)), pred.covars)
pred.coords <- SpatialPoints(BEF.grids)@coords
pointsInPolyOut <- pointsInPoly(BEF.poly, pred.coords)
pred.covars <- pred.covars[pointsInPolyOut,]
pred.coords <- pred.coords[pointsInPolyOut,]
krig_mlefit=krige.conv(coords=BEF.small[,1:2],data=BEF.small$logbio,
locations=pred.coords,krige=krige.control(type.krige="OK",obj.model=mle,
trend.d=trend.spatial(~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3,BEF.small),
trend.l=trend.spatial(~ELEV+SLOPE+SUM_02_TC1+SUM_02_TC2+SUM_02_TC3, pred.covars)))
pred_mlefit=krig_mlefit$predict
var_mlefit=krig_mlefit$krige.var
surf <- mba.surf(cbind(coords, log.bio), no.X=x.res, no.Y=x.res, extend=TRUE, sp=TRUE)$xyz.est
surf <- surf [!is.na((over(surf, BEF.shp)))[,1],]
surf <- as.image.SpatialGridDataFrame(surf)
z.lim <- range(surf[["z"]], na.rm=TRUE)
pred.grid <- as.data.frame(list(pred.coords, pred.mu=pred_mlefit, pred.sd=var_mlefit))
coordinates(pred.grid) = c("x", "y")
gridded(pred.grid) <- TRUE
pred.mu.image <- as.image.SpatialGridDataFrame(pred.grid["pred.mu"])
pred.sd.image <- as.image.SpatialGridDataFrame(pred.grid["pred.sd"])
dev.new()
image.plot(surf, axes=TRUE, zlim=z.lim, col=tim.colors(25), xaxs = "r", yaxs = "r", main="Log metric tons of biomass")
plot(BEF.shp, add=TRUE)
points(coords)
dev.new()
image.plot(pred.mu.image, axes=TRUE, zlim=z.lim, col=tim.colors(25), xaxs = "r", yaxs = "r", main="Log metric tons of biomass")
plot(BEF.shp, add=TRUE)
dev.new()
image.plot(pred.sd.image, col=tim.colors(25), xaxs = "r", yaxs = "r", main="Mean predicted log metric tons of biomass")
plot(BEF.shp, add=TRUE)
points(coords,cex=1)
mle
names(mle)
